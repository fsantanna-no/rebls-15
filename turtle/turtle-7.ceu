/*
 * Turtle STREAM
 */

// lst.turtle.queue

#include "sdl.ceu"
#include "sdl-gfx.ceu"

input void SDL_REDRAW;
input void SDL_QUIT;
input int  SDL_DT;

var _SDL_Window&? win;
    finalize
        win = _SDL_CreateWindow("Logo", _SDL_WINDOWPOS_CENTERED,
                                        _SDL_WINDOWPOS_CENTERED,
                                        400, 400,
                                        _SDL_WINDOW_SHOWN);
    with
        _SDL_DestroyWindow(&win);
    end

var int w, h;
_SDL_GetWindowSize(&win, &w, &h);

var _SDL_Renderer&? ren;
    finalize
        ren = _SDL_CreateRenderer(&win, -1, 0);
    with
        _SDL_DestroyRenderer(&ren);
    end

data Command with
    tag NOTHING;
or
    tag AWAIT with
        var int ms;
    end
or
    tag ROTATE with
        var int d_angle;
    end
or
    tag MOVE with
        var int d_pixels;
    end
or
    tag SEQUENCE with
        var Command one;
        var Command two;
    end
or
    tag REPEAT with
        var int     times;
        var Command command;
    end
or
    tag PAROR with
        var Command one;
        var Command two;
    end
end

data Queue with
    tag NIL;
or
    tag ROOT with
        var Queue running;
        var Queue waiting;
        var Queue tmp;
    end
or
    tag ITEM with
        var Command cmds;
        var Queue   prv;
    end
end

pool Queue[20] queue = new
    Queue.ROOT(
        Queue.ITEM(
            Command.PAROR(
                Command.MOVE(100),
                Command.AWAIT(1000)),
            Queue.NIL()),
        Queue.ITEM(
            Command.NOTHING(),
            Queue.NIL()),
        Queue.NIL());


class Turtle with
    var _SDL_Renderer& ren;
    var SDL_Point      pos   = SDL_Point(200,200);
    var int            angle = 180;
do
    every SDL_REDRAW do
        _filledCircleRGBA(&ren, pos.x,pos.y, 25,
                                0x00,0xAA,0x00,0xFF);

        var int x = this.pos.x + 25*_sin(angle/(180.0/_M_PI));
        var int y = this.pos.y + 25*_cos(angle/(180.0/_M_PI));
        _filledCircleRGBA(&ren, x,y, 8,
                                0x00,0x00,0x00,0xFF);
    end
end

class TurtleRotate with
    var Turtle& turtle;
    var int     d_angle;
do
    var int inc;
    if d_angle < 0 then
        d_angle = -d_angle;
        inc = 1;
    else
        inc = -1;
    end

    var float sum = turtle.angle;
    //every dt in SDL_DT do
    every 50ms do
        var int dt = 50;
        sum = sum + dt*inc*d_angle*0.001;
        turtle.angle = sum;
    end
end

class TurtleMove with
    var Turtle& turtle;
    var int     d_pixels;
do
    var int inc;
    if d_pixels > 0 then
        inc =  1;
    else
        inc = -1;
        d_pixels = -d_pixels;
    end

    var float sum = 0;
    var float x = turtle.pos.x;
    var float y = turtle.pos.y;
    //every dt in SDL_DT do
    every 50ms do
        var int dt = 50;
        var float mul = d_pixels * dt * 0.001 * this.inc;
        var float dx  = mul * _sin(turtle.angle/(180.0/_M_PI));
        var float dy  = mul * _cos(turtle.angle/(180.0/_M_PI));
        sum = sum + _fabs(dx) + _fabs(dy);
        x = x + dx;
        y = y + dy;
        turtle.pos.x = x;
        turtle.pos.y = y;
    end

end

class Interpreter with
    var  Turtle&    turtle;
    pool Command[]* cmds;
do
    traverse cmd in cmds do
        watching *cmd do
            //if cmd:NOTHING then
                //nothing;

            if cmd:AWAIT then
                await (cmd:AWAIT.ms) ms;

            else/if cmd:ROTATE then
                do TurtleRotate with
                    this.turtle  = turtle;
                    this.d_angle = cmd:ROTATE.d_angle;
                end;

            else/if cmd:MOVE then
                do TurtleMove with
                    this.turtle   = turtle;
                    this.d_pixels = cmd:MOVE.d_pixels;
                end;

            else/if cmd:PAROR then
                par/or do
                    traverse &cmd:PAROR.one;
                with
                    traverse &cmd:PAROR.two;
                end

            else/if cmd:SEQUENCE then
                traverse &cmd:SEQUENCE.one;
                traverse &cmd:SEQUENCE.two;

            else/if cmd:REPEAT then
                loop i in cmd:REPEAT.times do
                    traverse &cmd:REPEAT.command;
                end

            else
                _ceu_out_assert(0, "not implemented");
            end
        end
    end
end

par/or do
    await SDL_QUIT;
with
    every SDL_REDRAW do
        _SDL_SetRenderDrawColor(&ren, 0xFF,0xFF,0xFF, 0xFF);
        _SDL_RenderFillRect(&ren, null);
    end
with

    var Turtle turtle with
        this.ren = ren;
    end;

    traverse qu in queue do
        watching *qu do
            if qu:ROOT then
                loop do
                    par/and do
                        traverse &qu:ROOT.running;
                    with
                        await qu:ROOT.waiting;
                    end
                    qu:ROOT.running = qu:ROOT.waiting;
                    qu:ROOT.waiting = new Queue.ITEM(
                                            Command.NOTHING(),
                                            Queue.NIL());
                end
            else/if qu:ITEM then
                traverse &qu:ITEM.prv;
                do Interpreter with
                    this.turtle = turtle;
                    this.cmds   = qu:ITEM.cmds;
                end;
            end
        end
    end

    await FOREVER;
with
    _printf("; TURTLE STREAM COMMANDS:\n");
    _printf("> move 100 1000\n");
    _printf("   ; moves at 100 px/s during 1000 ms\n");
    _printf("> rotate 180 2000\n");
    _printf("   ; rotates at 180 degrees/s during 2000ms\n");
    _printf("> quit\n");
    _printf("   ; terminates the program\n");
    _printf("\n");
    loop do
        native @pure _strcmp();
        native do
            void get_cmd (char* cmd, int* vel, int* time) {
                while (1) {
                    printf("> ");
                    int n = scanf("%s", cmd);
                    if (n == 1) {
                        if (strcmp(cmd,"quit") == 0) {
                            break;
                        } else if ( (strcmp(cmd,"move")   == 0) ||
                                    (strcmp(cmd,"rotate") == 0) )
                        {
                            int n = scanf("%d %d", vel, time);
                            if (n == 2) {
                                break;
                            }
                        }
                    }
                    printf("invalid command\n");
                    {
                        char c;
                        while((c = getchar()) != '\n' && c != EOF);
                    }
                }
            }
        end

        var char[255] cmd;
        var int vel, time;
        async/thread (cmd,vel,time) do
            _get_cmd(cmd, &vel, &time);
        end

        var bool move_or_rotate = false;

        // QUIT
        if _strcmp(cmd,"quit")==0 then
            break;

        // MOVE
        else/if _strcmp(cmd,"move") == 0 then
            move_or_rotate = true;
            queue.ROOT.tmp = new Queue.ITEM(
                                  Command.PAROR(
                                   Command.MOVE(vel),
                                   Command.AWAIT(time)),
                                  Queue.NIL());

        // ROTATE
        else/if _strcmp(cmd,"rotate") == 0 then
            move_or_rotate = true;
            queue.ROOT.tmp = new Queue.ITEM(
                                  Command.PAROR(
                                   Command.ROTATE(vel),
                                   Command.AWAIT(time)),
                                  Queue.NIL());
        end

        if move_or_rotate then
            queue.ROOT.tmp.ITEM.prv = queue.ROOT.waiting.ITEM.prv;
            queue.ROOT.waiting = queue.ROOT.tmp;
        end
    end
#if 0
    every 2s do
        do
            queue.ROOT.tmp = new Queue.ITEM(
                                    Command.NOTHING(),
                                    Queue.ITEM(
                                      Command.PAROR(
                                       Command.ROTATE(180),
                                       Command.AWAIT(1000)),
                                      Queue.NIL()));
            _ceu_out_assert(queue.ROOT.tmp.ITEM.prv.ITEM.cmds.PAROR.one.ROTATE,
                            "out of memory");
            queue.ROOT.tmp.ITEM.prv.ITEM.prv = queue.ROOT.waiting.ITEM.prv;
            queue.ROOT.waiting = queue.ROOT.tmp;
        end
        do
            queue.ROOT.tmp = new Queue.ITEM(
                                    Command.NOTHING(),
                                    Queue.ITEM(
                                      Command.PAROR(
                                       Command.MOVE(180),
                                       Command.AWAIT(1000)),
                                      Queue.NIL()));
            _ceu_out_assert(queue.ROOT.tmp.ITEM.prv.ITEM.cmds.PAROR.one.MOVE,
                            "out of memory");
            queue.ROOT.tmp.ITEM.prv.ITEM.prv = queue.ROOT.waiting.ITEM.prv;
#if 0
_ceu_out_assert(queue.ROOT.tmp.ITEM.prv.ITEM.cmds.PAROR.one.ROTATE,
        "out of memory");
#endif
            queue.ROOT.waiting = queue.ROOT.tmp;
        end
    end
#endif
with
    every SDL_REDRAW do
        _SDL_RenderPresent(&ren);
    end
end

escape 1;
