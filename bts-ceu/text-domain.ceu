input int TICK;
native @nohold _scanf();

native do
  #include <assert.h>
end

data Leaf with
    // is b1 on b2?
    tag SENSEON with
        var int b1;
        var int b2;
    end
or
    // is b1 clear?
    tag SENSECLEAR with
        var int b1;
    end
or
    // is b1 on the table?
    tag SENSEONTABLE with
        var int b1;
    end
or
    // move bm from bf to bt
    tag MOVEBLOCKTOBLOCK with
        var int bm;
        var int bf;
        var int bt;
    end
or
    // move bm from bf to table
    tag MOVETOTABLE with
        var int bm;
        var int bf;
    end
or
    // move bm from table to bt
    tag MOVEFROMTABLE with
        var int bm;
        var int bt;
    end
end

class LeafHandler with
    var Leaf& leaf;
do
    var int answer = 0;
    if leaf.SENSEON then
        _printf("is block %d on block %d?\n", leaf.SENSEON.b1, leaf.SENSEON.b2);
        _scanf("%d", &answer);
        if answer then _printf("saw yes\n"); else _printf("saw no\n"); end
    else/if leaf.SENSECLEAR then
        _printf("is block %d clear?\n", leaf.SENSECLEAR.b1);
        _scanf("%d", &answer); 
        if answer then _printf("saw yes\n"); else _printf("saw no\n"); end
    else/if leaf.SENSEONTABLE then
        _printf("is block %d on the table?\n", leaf.SENSEONTABLE.b1);
        _scanf("%d", &answer);
        if answer then _printf("saw yes\n"); else _printf("saw no\n"); end
    else/if leaf.MOVEBLOCKTOBLOCK then
        _printf("move block %d from block %d to block %d\n", leaf.MOVEBLOCKTOBLOCK.bm, leaf.MOVEBLOCKTOBLOCK.bf, leaf.MOVEBLOCKTOBLOCK.bt); 
        answer = 1;
    else/if leaf.MOVETOTABLE then
        _printf("move block %d from block %d to the table\n", leaf.MOVETOTABLE.bm, leaf.MOVETOTABLE.bf);  
        answer = 1;
    else/if leaf.MOVEFROMTABLE then
        _printf("move block %d from the table to block %d\n", leaf.MOVEFROMTABLE.bm, leaf.MOVEFROMTABLE.bt);
        answer = 1;
    else
        _assert(false);
    end
    escape answer;
end

#include "btree-1.ceu"
    /* depends on the "Leaf" data type and the "LeafHandler" class */

pool BTree[] btree =
    new BTree.SELECTOR(
        BTree.SEQUENCE(
            BTree.LEAF(Leaf.SENSEONTABLE(3)),
            BTree.SEQUENCE(
                BTree.LEAF(Leaf.MOVEBLOCKTOBLOCK(2, 3, 1)),
                BTree.LEAF(Leaf.MOVEFROMTABLE(3, 2))
            )
        ),
        BTree.SEQUENCE(
            BTree.LEAF(Leaf.MOVETOTABLE(3, 2)),
            BTree.SEQUENCE(
                BTree.LEAF(Leaf.MOVEFROMTABLE(2, 1)),
                BTree.LEAF(Leaf.MOVEFROMTABLE(3, 2))
            )
        )
    );

do BTreeTraverse with
    this.btree = btree;
end;

escape 1;

