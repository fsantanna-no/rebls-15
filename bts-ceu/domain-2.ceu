input int SDL_DT;

data Ball with
    var int x1,y1;
    var int x2,y2;
end

data Leaf with
    tag NOTHING;
or
    tag TWEEN with
        var Ball& ball;
        var Ball  to;
        var float duration;
    end
end

class LeafHandler with
    var Leaf& leaf;
do
    var float fraq     = 0;
    var Ball& ball     = leaf.TWEEN.ball;
    var Ball  fr       = leaf.TWEEN.ball;
    var Ball& to       = leaf.TWEEN.to;
    var float duration = leaf.TWEEN.duration;
    loop do
        var int dt = await SDL_DT;
        if fraq >= 1 then
            break;
        end
        ball.x1 = to.x1*fraq + fr.x1*(1-fraq);
        ball.y1 = to.y1*fraq + fr.y1*(1-fraq);
        ball.x2 = to.x2*fraq + fr.x2*(1-fraq);
        ball.y2 = to.y2*fraq + fr.y2*(1-fraq);
        fraq = fraq + dt/duration/1000;
    end
end

#include "btree-2.ceu"
    /* depends on the "Leaf" data type and the "LeafHandler" class */

var Ball red  = Ball(10,50,20,60);
var Ball blue = Ball(380,280,390,290);

pool BTree[] btree = new
    BTree.SEQ(
        BTree.PAR(
            BTree.SEQ(
                BTree.LEAF(Leaf.TWEEN(blue, Ball(380,20,390,30), 1.0)),
                BTree.LEAF(Leaf.TWEEN(blue, Ball(50,10,60,20), 1.0))
            ),
            BTree.SEQ(
                BTree.LEAF(Leaf.TWEEN(red, Ball(380,20,390,30), 1.0)),
                BTree.LEAF(Leaf.TWEEN(red, Ball(10,50,20,60), 1.0))
            )
        ),
    BTree.SEQ(
        BTree.PAR(
            BTree.LEAF(Leaf.TWEEN(blue, Ball(10,50,110,150), 1.0)),
            BTree.LEAF(Leaf.TWEEN(red,  Ball(50,10,150,110), 1.0))
        ),
    BTree.SEQ(
        BTree.PAR(
            BTree.LEAF(Leaf.TWEEN(red,  Ball(10,50,20,60), 1.0)),
            BTree.LEAF(Leaf.TWEEN(blue, Ball(50,10,60,20), 1.0))
        ),
        BTree.PAR(
            BTree.SEQ(
                BTree.LEAF(Leaf.TWEEN(blue, Ball(380,20,390,30), 1.0)),
                BTree.LEAF(Leaf.TWEEN(blue, Ball(380,280,390,290), 1.0))
            ),
            BTree.SEQ(
                BTree.LEAF(Leaf.TWEEN(red, Ball(380,20,390,30), 1.0)),
            BTree.SEQ(
                BTree.LEAF(Leaf.TWEEN(red, Ball(10,50,20,60), 1.0)),
                BTree.LEAF(Leaf.TWEEN(red, Ball(380,280,390,290), 1.0))
            ))
        )
    )));

par/or do
    do BTreeTraverse with
        this.btree = btree;
    end;
    await FOREVER;
with
    #include "sdl.ceu"
    #include "sdl-gfx.ceu"
    input void SDL_REDRAW;
    var _SDL_Window&? win;
        finalize
            win = _SDL_CreateWindow("BTree 02",
                    _SDL_WINDOWPOS_UNDEFINED, _SDL_WINDOWPOS_UNDEFINED,
                    400, 300, _SDL_WINDOW_SHOWN);
        with
            _SDL_DestroyWindow(&win!);
        end
    var _SDL_Renderer&? ren;
        finalize
            ren = _SDL_CreateRenderer(&win!, -1, 0);
        with
            _SDL_DestroyRenderer(&ren!);
        end
    every SDL_REDRAW do
        _SDL_SetRenderDrawColor(&ren!, 0xFF,0xFF,0xFF,0xFF);
        _SDL_RenderFillRect(&ren!, null);
        var int r1 = (blue.x2-blue.x1)/2;
        _filledCircleRGBA(&ren!, (int)blue.x1+r1, (int)blue.y1+r1, r1,
                                 0x00,0x00,0xFF,0xFF);
        var int r2 = (red.x2-red.x1)/2;
        _filledCircleRGBA(&ren!, (int)red.x1+r2, (int)red.y1+r2, r2,
                                 0xFF,0x00,0x00,0xFF);
        _SDL_RenderPresent(&ren!);
    end
with
    input void SDL_QUIT;
    await SDL_QUIT;
end

escape 1;
