#define ALL

native do
    SDL_Window*   WIN = NULL;
    SDL_Renderer* REN = NULL;
    int REN_W, REN_H;
    ##define SDL_MATH
end

#include "c.ceu"
#include "sdl.ceu"
#include "sdl-gfx.ceu"

input void SDL_QUIT;
input void SDL_REDRAW;
input int  SDL_DT;
input _SDL_KeyboardEvent*    SDL_KEYDOWN;
input _SDL_MouseButtonEvent* SDL_MOUSEBUTTONDOWN;

#ifdef CEU_TIMEMACHINE
input int SDL_DT;
global do
#endif

finalize
    _WIN = _SDL_CreateWindow("DEMO",
            _SDL_WINDOWPOS_UNDEFINED, _SDL_WINDOWPOS_UNDEFINED,
            600, 400, _SDL_WINDOW_SHOWN);
with
    _SDL_DestroyWindow(_WIN);
end

_SDL_GetWindowSize(_WIN, &_REN_W, &_REN_H);

finalize
    _REN = _SDL_CreateRenderer(_WIN, -1, 0);
with
    _SDL_DestroyRenderer(_REN);
end

#ifdef CEU_TIMEMACHINE
end
#endif

var int ex = 1;

#define MAX 4

class Intro with
    var char* title;
do
    loop i in 30 do
        _printf("\n");
    end
    _printf("================================\n");
    _printf("%s\n", this.title);
    _printf("================================\n");
    await 2s;
    loop i in 30 do
        await 200ms;
        _printf("\n");
    end
end

par/or do
    loop do
        do
            // show blank screen
            _SDL_SetWindowTitle(_WIN, "-- blank --");
            watching SDL_KEYDOWN do
                every SDL_REDRAW do
                    _SDL_SetRenderDrawColor(_REN, 0x00,0x00,0x00, 0xFF);
                    _SDL_RenderFillRect(_REN, null);
                    _SDL_RenderPresent(_REN);
                end
            end
        end
        par/or do
            if ex == 1 then
                #undef  Title
                #define Title Title1
                #include "list/list.ceu"
            else/if ex == 2 then
                #undef  Title
                #define Title Title2
                #include "bts-ceu/text-domain.ceu"
            else/if ex == 3 then
                #undef  Title
                #define Title   Title3
                #define Command Command3
                #define Turtle  Turtle3
                #define Interpreter Interpreter3
                #define TurtleMove   TurtleMove3
                #define TurtleRotate TurtleRotate3
                #include "turtle/turtle-2.ceu"
            else/if ex == 4 then
                #undef  Title
                #undef  Command
                #undef  Turtle
                #undef  TurtleRotate
                #undef  TurtleMove
                #undef  Interpreter
                #define Title   Title4
                #define Command Command4
                #define Interpreter Interpreter4
                #define Turtle  Turtle4
                #define TurtleMove   TurtleMove4
                #define TurtleRotate TurtleRotate4
                #include "turtle/turtle-7.ceu"
            else
                await FOREVER;
            end
        with
            loop do
                var _SDL_KeyboardEvent* key = await SDL_KEYDOWN;
                if key:keysym.sym==_SDLK_r or key:keysym.sym==_SDLK_DOWN or
                                              key:keysym.sym==_SDLK_UP then
                    ex = ex;
                    break;
                else/if key:keysym.sym==_SDLK_p or key:keysym.sym==_SDLK_LEFT then
                    ex = ex - 1;
                    break;
                else/if key:keysym.sym==_SDLK_n or key:keysym.sym==_SDLK_RIGHT then
                    ex = ex + 1;
                    break;
                end
            end
            if ex < 1 then
                ex = MAX;
            else/if ex > MAX then
                ex = 1;
            end
        end
    end
with
    await SDL_QUIT;
end

escape 0;
