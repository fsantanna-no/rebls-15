native do
  #include <assert.h>
end

input void VISIT;
input void NEXT;

/////////////////////////////
// THIS SHOULDN'T BE REQUIRED
data Dummy with
  tag NIL;
or
  tag REC with
    var Dummy* rec;
  end
end
pool Dummy[] ds;
/////////////////////////////

var int tot  = 4;

// native @nohold _scanf();
// _printf("Size of tuples: ");
// _scanf("%d", &tot);

var int&? vec;
finalize
    vec = _malloc(sizeof(int)*tot);
with
    native @nohold _free();
    _free(vec);
end

loop i in tot do
    (&vec!)[i] = 0;
end

par/or do
    every VISIT do
        _printf("( ");
        loop i in tot do
            _printf("%d ", (&vec!)[i]);
        end
        _printf(")\n");
    end
with
    traverse d in ds with
        var int idx = 0;
        var bool reversed = false;
    do
        if idx == tot then
            await NEXT;
        else
            traverse d with
                this.idx = idx + 1;
            end;
            (&vec!)[idx] = 1 - (&vec!)[idx];
            traverse d with
                this.idx = idx + 1;
            end;
         end
    end
with
    loop do
        async do
            emit VISIT;
            emit NEXT;
        end
    end
end

escape 0;
