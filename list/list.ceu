#define HEADER_TITLE "List Data Type"
#include "../header.ceu"

#ifdef ALL
do Intro with
    this.title = "Example of Figures 2-4:\n > Lists";
end;
#endif

data List with
    tag NIL;
or
    tag CONS with
        var int  head;
        var List tail;
    end
end

_printf("--------------------------------\n");
_printf("Example of Figure 2:\n");
_printf(" > 1st block\n");
_printf("--------------------------------\n");
_printf("\n");
await 2s;

// lst.list
do
    pool List[1] list;
    list = new List.CONS(10,
                List.CONS(20,
                 List.CONS(30,
                  List.NIL())));
    _printf("%d %d\n", list.CONS.head,
                       list.CONS.tail.NIL);
        // prints 10, 1
end

_printf("\n");
_printf("\n");
await 2s;

_printf("--------------------------------\n");
_printf("Example of Figure 2:\n");
_printf(" > 2nd block\n");
_printf("--------------------------------\n");
_printf("\n");
await 2s;

// lst.list
do
    pool List[] list;
    list = new List.CONS(10,
                List.CONS(20,
                 List.CONS(30,
                  List.NIL())));
    list.CONS.tail = new List.CONS(50, List.NIL());
    _printf("%d\n", list.CONS.tail.CONS.head);
        // prints 50 (20 and 30 have been freed)
end

_printf("\n");
_printf("\n");
await 2s;

_printf("--------------------------------\n");
_printf("Example of Figure 3:\n");
_printf(" > Sum of a list\n");
_printf("--------------------------------\n");
_printf("\n");
await 2s;

// lst.list.sum
do
    pool List[] list = new
        List.CONS(10,
            List.CONS(20,
                List.CONS(30,
                    List.NIL())));

    var int sum =
        traverse l in &&list do
            if l:NIL then
                escape 0;
            else
                watching *l do
                    var int sum_tail = traverse &&l:CONS.tail;
                    escape sum_tail + l:CONS.head;
                end
            end
        end;

    _printf("SUM = %d\n", sum);
end

_printf("\n");
_printf("\n");
await 2s;

_printf("--------------------------------\n");
_printf("Example of Figure 3:\n");
_printf(" > Reactive sum of a list\n");
_printf("--------------------------------\n");
_printf("\n");
await 2s;

// lst.list.sum.react
do
#ifndef ALL
    class Input with
    do
        async do
            emit 10s;
        end
    end
    var Input _;
#endif

    do
        pool List[] l;
        l = new
            List.CONS(10,
                List.CONS(20,
                    List.CONS(30,
                        List.NIL())));

        var int sum =
            traverse e in &&l do
                if e:NIL then
                    escape 0;
                else
                    watching *e do
                        _printf("partial = %d\n", e:CONS.head);
                        await 1s;
                        var int sum_tail = traverse &&e:CONS.tail;
                        escape sum_tail + e:CONS.head;
                    end
                    escape 0;
                end
            end;
        _printf("sum = %d\n", sum);
    end
end

await 2s;
_printf("\n");
_printf("--------------------------------\n");
_printf(" > OK\n");
_printf("--------------------------------\n");

#ifdef ALL
await FOREVER;
#else
escape 0;
#endif
